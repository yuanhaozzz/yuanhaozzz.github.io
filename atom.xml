<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渡的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-22T12:21:21.760Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>渡丶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间戳转换年月日小月问题</title>
    <link href="http://yoursite.com/2018/04/22/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E5%B9%B4%E6%9C%88%E6%97%A5%E5%B0%8F%E6%9C%88%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/22/时间戳转换年月日小月问题/</id>
    <published>2018-04-22T11:55:43.000Z</published>
    <updated>2018-04-22T12:21:21.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从今天开始，更新文章只针对于功能块进行更新，可能一次几个标题，这样能够在后面的日子中可以找到相关问题，规范一下</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>针对于时间转换的问题在工作当中可是用的很多的，比如这次的时间需求，1.##格式正确##，2.##结束时间不能大于开始时间##，3.##有效时间##</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>new Date(‘2017/02/02 00:00:00’)</p><p>对于这种时间 我是将格式放入new Date当中进行装换，这样的话问题1，2都可解决，对于问题三就是今天得重点</p><p>大家都知道有大小月，问题在于用这个转换小月的话还是会合法，比如2018/02/31</p><p><img src="/static/04-22-1.png" alt="img"></p><p>大家看到问题了吧，对！就是在小月31日时也是合法，但是会转换为别的日期</p><p>解决，在转换前和转换后进行对比就好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;从今天开始，更新文章只针对于功能块进行更新，可能一次几个标题，这样能够在后面的日子中可以找到相关问题，规范一下&lt;/p&gt;
&lt;h3 id=&quot;需求
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿西吧</title>
    <link href="http://yoursite.com/2018/04/15/%E9%98%BF%E8%A5%BF%E5%90%A7/"/>
    <id>http://yoursite.com/2018/04/15/阿西吧/</id>
    <published>2018-04-15T12:06:56.000Z</published>
    <updated>2018-04-15T12:35:58.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知不觉的，已经一个月没有更新了，最近工作真的很忙，简直没有时间，不过，在这段时间内，老大对于我的纠正，我也学会了很多的东西，比如element UI算是熟悉了，对于Jquery的操作也基本都会了（以前真的没怎么用过），主要来说，我的问题还是在命名规范的上面，简直被老大喷的不要不要的，不过老大对我很好，每次都是好好的说，对于前端UI上面的设计也算是有点体会了。</p><h3 id="Element-form自带验证"><a href="#Element-form自带验证" class="headerlink" title="Element form自带验证"></a>Element form自带验证</h3><p>刚开始解除，对于这种验证格式真的没有解除过，导致返工了很多的东西，Element 对于 form表单验证做的还是比较的齐全的</p><p><img src="/static/04-15-1.png" alt="img"></p><p>引入各种就不多说了现在只说下用法</p><p><el-form :rules="rules" ref="form" :model="ruleForm"></el-form></p><p>:model 表单数据对象<br>:rules 表单验证规则<br>ref 需要调用Element 封装的内部方法</p><p>以上三者为必须！</p><p>model 就是你data里面需要初始化的值</p><p>eg:ruleForm: {<br>          name: ‘’,<br>        }</p><p>在v-model当中写入对应的即可<br>rules 验证方式分为两种，一种为行内，一种写在data当中</p><p><strong>行内</strong><br>    <el-form-item prop="name" rules="[        { required: true, message: '请输入姓名', trigger: 'blur' },    ]"></el-form-item><br>其中，required为必填项,也就是左边那个##*##样式</p><p><strong>data中定义</strong></p><pre><code>data () {    return {        rules:{            name: { type: &apos;String&apos;, required: true, message: &apos;请选择名称&apos;, trigger: &apos;blur&apos; }        }    }}</code></pre><p>以上为rules的定义规则</p><p>这里还要说一下自定义验证<br>    data () {<br>        var nameVerification = function (rule, value, callback) {<br>            // 业务逻辑</p><pre><code>        value 失去焦点的值        callback 一定要记住，不管你的验证是否通过都必须有callback调用，否则在点击确定按钮将会无效！！！！    }     return {        rules:{             name: { validator: nameVerification, trigger: &apos;blur&apos; }        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知不觉的，已经一个月没有更新了，最近工作真的很忙，简直没有时间，不过，在这段时间内，老大对于我的纠正，我也学会了很多的东西，比如eleme
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git日常基本指令</title>
    <link href="http://yoursite.com/2018/03/14/git%E6%97%A5%E5%B8%B8%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/03/14/git日常基本指令/</id>
    <published>2018-03-14T05:33:33.000Z</published>
    <updated>2018-03-14T05:50:09.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好久没有更新了，这段时间也忙也闲，金三银四，大家都在各自的公司因为各种原因都在进行着面试，我也一样，上周收到了offer，这周就赶紧进行交接，心情也还不错，可惜就是我的团队我很不舍得离开，大家都对我很好，哎，好不舍，但是现实就是这样，没有不散的宴席，大家加油吧，我相信你们会更好的！</p><p><img src="http://img1.imgtn.bdimg.com/it/u=2417507986,147620643&amp;fm=27&amp;gp=0.jpg" alt="img"></p><a id="more"></a><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>对于现在的协同开发者工具<strong>Git</strong>、<strong>SVN</strong>大家应该都已经很熟悉了，当然，现在还是Git使用的更多一些，并且也有很多的优势，安装什么的就不说，只是简单的复习一下简单的命令，不喜勿喷</p><pre><code>git add .               提交全部文件git commit -m &quot;注释&quot;    提交到本地git pull                拉取代码，解决冲突git add .git commit -m &quot;注释&quot;git push                进行远程推送的仓库当中git push origin 分支名  也可完成推送</code></pre><p>这是简单的提交</p><p>创建分支</p><pre><code>git checkout -b &quot;分知名&quot;git push origin &quot;创建的分知名&quot;    推送到远端</code></pre><p>查看分支</p><pre><code>git branch</code></pre><p>合并分支</p><pre><code>git merge 分支名</code></pre><p>注：合并分支后先进行解决冲突</p><p>查看日志</p><pre><code>git log         查看全部日志git log -p      查看已提交详情的修改git log -p -2   查看最近两次的详情修改</code></pre><p>回退版本</p><pre><code>git reset --hard 版本号</code></pre><p>注：在这里回退的版本后，使用git log 只能打印到你回退版本的时间记录处，所以，大家一定要做好备份！！！！！！！！！！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;好久没有更新了，这段时间也忙也闲，金三银四，大家都在各自的公司因为各种原因都在进行着面试，我也一样，上周收到了offer，这周就赶紧进行交接，心情也还不错，可惜就是我的团队我很不舍得离开，大家都对我很好，哎，好不舍，但是现实就是这样，没有不散的宴席，大家加油吧，我相信你们会更好的！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img1.imgtn.bdimg.com/it/u=2417507986,147620643&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈原型链 prototype __proto__</title>
    <link href="http://yoursite.com/2018/03/03/%E6%B5%85%E8%B0%88%E5%8E%9F%E5%9E%8B%E9%93%BE-prototype-proto/"/>
    <id>http://yoursite.com/2018/03/03/浅谈原型链-prototype-proto/</id>
    <published>2018-03-03T03:16:01.000Z</published>
    <updated>2018-03-03T04:06:59.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>hi，这两天都比较忙，好不容易有点时间立刻就来更新啦~，因为项目都是由Vue进行开发的，一直想看看源码，但是又限于自己的原因，所以先来对面向对象来总结总结！~</p><p><img src="http://img5.imgtn.bdimg.com/it/u=2822639283,850849670&amp;fm=11&amp;gp=0.jpg" alt="img"></p><a id="more"></a><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>相信大家对于对象来说都很熟悉了，在js当中万物皆对象嘛！</p><p>对于prototype大家都知道，每一个函数都会有一个prototype属性，但是<strong>proto</strong>是个什么呢？</p><p>请看下面一段代码</p><pre><code>let obj = {};obj.prototype.a = function(){       //解析到这会报错,实例中是无法使用prototype}obj.a();</code></pre><p><img src="/static/o1.png" alt="img"></p><p>为什么呢？ 因为prototype是只有函数拥有的属性，在对象实例中是无法使用的，那如何实现呢？</p><pre><code>function Man(height){    this.height = height}let obj = new Man(178);Man.prototype.a = function(){    alert(this.height)}obj.a();</code></pre><p>代码运行正常</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>每一个对象都拥有<strong>proto</strong>属性，这个属性是用来指向构造函数的prototype的<br>每一个函数都拥有prototype属性，通过<strong>proto</strong>来指向prototype来实现<strong>继承</strong><br>每一个函数都拥有constructor属性，指向所有原型实例的构造函数</p><p>找一个实例的属性 会进行递归操作：</p><p>实例属性 =&gt; __proto =&gt; 实例属性构造函数的prototype =&gt; obj.prototype 为止</p><h3 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h3><p><img src="https://segmentfault.com/img/bVT7ae?w=423&amp;h=513" alt="img"></p><p>暂时更新这么多啦，一起加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;hi，这两天都比较忙，好不容易有点时间立刻就来更新啦~，因为项目都是由Vue进行开发的，一直想看看源码，但是又限于自己的原因，所以先来对面向对象来总结总结！~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img5.imgtn.bdimg.com/it/u=2822639283,850849670&amp;amp;fm=11&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flex布局 移动端布局利器</title>
    <link href="http://yoursite.com/2018/02/26/flex%E5%B8%83%E5%B1%80-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E5%88%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2018/02/26/flex布局-移动端布局利器/</id>
    <published>2018-02-26T12:09:49.000Z</published>
    <updated>2018-02-26T14:13:04.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一名前端开发人员，不仅要有睿智的大脑，更要想办法去提高工作效率，在传统布局中<strong>float</strong>、<strong>display:inline-block</strong>，使用后是不是总感觉要么向上多一点，要么向下多一点，还要使用margin或者padding来进行调，不然总感觉怪怪的！</p><p><img src="http://img5.imgtn.bdimg.com/it/u=2212265039,2568628666&amp;fm=27&amp;gp=0.jpg" alt="img"></p><p>哈哈哈，进入正题！<br><a id="more"></a></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$" target="_blank" rel="noopener">Flex 布局教程:语法篇 - 阮一峰的网络日志</a></p><h3 id="简介flex"><a href="#简介flex" class="headerlink" title="简介flex"></a>简介flex</h3><p>flex布局是W3C提出的一种新型的布局方案，目前大部分浏览器都支持，但是仍然有兼容性问题，但是对于H5开发工程师来说，这不是个问题，因为基于chrome内核,当然，也需要添加display:-webkit-flex;</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071003.jpg" alt="img"></p><p>在传统布局中，水平方向<strong>块</strong>使用<font color="red">margin: 0 auto</font> | <font color="aqua">left:50% transform:translateX(-50%)</font>实现，<strong>行内</strong><font color="aqua">text-align:center</font>即可实现，可是对于垂直居中实现就比较麻烦</p><p>flex是Flexible Box的缩写，意为”弹性布局”,提供该盒子提供更大的灵活度。</p><p>任何一个容器都可以使用flex,谷歌内核必须添加-webkit-</p><pre><code>.box{    display:-webkit-flex;    display:flex;}</code></pre><h3 id="flex基本介绍"><a href="#flex基本介绍" class="headerlink" title="flex基本介绍"></a>flex基本介绍</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="img"></p><p>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>align-content</li><li>flex-flow</li></ul><font size="5">一、flex-direction(主轴)</font><p>在容器内，决定水平方向的排列</p><pre><code>1. flex-direction:row;左 =&gt; 右</code></pre><p><img src="/static/flx1.png" alt="img"></p><pre><code>2. flex-direction:row-reverse;右 =&gt; 左</code></pre><p><img src="/static/flex2.png" alt="img"></p><pre><code>3. flex-direction:column;上 =&gt; 下</code></pre><p><img src="/static/flex3.png" alt="img"></p><pre><code>4. flex-direction:column-reverse;下 =&gt; 上</code></pre><p><img src="/static/flex4.png" alt="img"></p><font size="5">二、flex-wrap(主轴)</font> <p>在容器内，决定水平方向是否换行</p><pre><code>1.flex-wrap:nowrap;不换行</code></pre><p><img src="/static/flex5.png" alt="img"></p><pre><code>2.flex-wrap:wrap;换行</code></pre><p><img src="/static/flex6.png" alt="img"></p><pre><code>3.flex-wrap:wrap-reverse;换行换位</code></pre><p><img src="/static/flex7.png" alt="img"></p><font size="5">三、justify-content(主轴)</font> <p>在容器内，决定水平方向的对齐方式</p><pre><code>1.justify-content:flex-start;在主轴开始位置对齐</code></pre><p><img src="/static/flex8.png" alt="img"></p><pre><code>2.justify-content:flex-end;在主轴结束位置对齐</code></pre><p><img src="/static/flex9.png" alt="img"></p><pre><code>3.justify-content:center;在主轴居中</code></pre><p><img src="/static/flex10.png" alt="img"></p><pre><code>4.justify-content:space-around;两边空白间隙排列</code></pre><p><img src="/static/flex11.png" alt="img"></p><pre><code>5.justify-content:space-between;无空白居中间隙排列</code></pre><p><img src="/static/flex12.png" alt="img"></p><font size="5">四、align-items(交叉轴)</font> <p>在容器内，决定垂直方向的排列</p><pre><code>1.align-items:flex-start;上</code></pre><p><img src="/static/flex13.png" alt="img"></p><pre><code>2.align-items:flex-end;下</code></pre><p><img src="/static/flex14.png" alt="img"></p><pre><code>3.align-items:center;垂直方向居中</code></pre><p><img src="/static/flex15.png" alt="img"></p><font size="5">四、align-content(交叉轴)</font><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="img"></p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h3 id="未完，待续-！"><a href="#未完，待续-！" class="headerlink" title="未完，待续~！"></a>未完，待续~！</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一名前端开发人员，不仅要有睿智的大脑，更要想办法去提高工作效率，在传统布局中&lt;strong&gt;float&lt;/strong&gt;、&lt;strong&gt;display:inline-block&lt;/strong&gt;，使用后是不是总感觉要么向上多一点，要么向下多一点，还要使用margin或者padding来进行调，不然总感觉怪怪的！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img5.imgtn.bdimg.com/it/u=2212265039,2568628666&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;哈哈哈，进入正题！&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端基础算法 冒泡排序 选择排序 快速排序</title>
    <link href="http://yoursite.com/2018/02/24/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/02/24/前端基础算法-冒泡排序-选择排序-快速排序/</id>
    <published>2018-02-24T13:02:53.000Z</published>
    <updated>2018-02-24T14:08:27.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一名合格的前端不仅对自身业务能力的要求，还必须具有一定的算法知识，虽然博主数学就没及过格~,但是没办法，还是要学，这不，年前两天没啥事儿，看了看我最头痛的算法，当然，都是基本的，各位同学看到肯定一下就明白了，好了，进入正题~！<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3305254330,4081387098&amp;fm=27&amp;gp=0.jpg" alt="img"></p><a id="more"></a><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序算是最基本的了，也是效率最低的，但是他很稳定，对于一些小玩意儿还是可以，先上代码~</p><pre><code>//TODO 冒泡排序//TODO 首先就是两层循环，这样才能够拿一个和所有的值进行比对var item;for(var i=0;i &lt; arr.length;i++){    for(var j=0;j &lt; arr.length - 1 - i;j++){        //TODO 如果当前值大于当前第二个值 进行交换        if(arr[j] &lt; arr[j+1]){            item = arr[j];            arr[j] = arr[j+1];            arr[j+1] = item;        }    }}</code></pre><p>例如:</p><pre><code>var arr = [5,6,3,2,7];第一层5 6             6大    6 3           6大        6 2         6大            6 7       7大现在arr = [5,3,2,6,7]第二层5 3             5大    5 2           5大        5 6         6大现在arr = [3,2,5,6,7]依次类推~</code></pre><p>而且是不是发现循环次数越来越小,那是因为j循环的条件 j &lt; arr.length - 1 - i,当每次循环后，i会++ 所以，循环此时也会减小，提高性能，因为最大数已经排列到后续。</p><pre><code>item = arr[j];arr[j] = arr[j+1];arr[j+1] = item;</code></pre><p>此处为值的交换，使用变量来保存当前值，然后通过索引来找到对应的值进行交换。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>对于选择排序其实与冒泡排序出入并不大，两者都是算法当中的<strong>慢排</strong>，上代码！</p><pre><code>//TODO 选择排序//TODO item 存储值 minIndex 存储索引var item,minIndex;for(var i=0;i &lt; arr.length;i++){    //默认为第0个索引    minIndex = i;    for(var j=i+1;j&lt;arr.length;j++){        //发现比minIndex小，从新进行赋值        if(arr[j] &gt; arr[minIndex]){            minIndex = j;        }    }    //交换值    item = arr[i];    arr[i] = arr[minIndex];    arr[minIndex] = item;}</code></pre><p>不同点：</p><ul><li>冒泡不管是大还是小，都是从后往前排列，而选择排序则不管大小都是从前往后排列，当然，这个根据自己喜好走的，只需要改变条件和初始值即可</li><li>选择排序采用一个变量几率索引来进行控制最小值。</li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>听名字就知道很快咯，是算法效率高的一种!</p><pre><code>//TODO 快速排序function biu(arr){    if(arr.length &lt;= 1) return arr    //TODO 获取当前一半下标的位置    let pivotIndex = Math.floor(arr.length/2);    //TODO 通过获取到的位置获取到当下下标位置的值    let pivot = arr.splice(pivotIndex,1)[0];    //TODO 定义好两个数组    let left = [];    let right = [];    for(var i=0;i &lt; arr.length;i++){        if(arr[i] &gt; pivot){            right.push(arr[i])        }else{            left.push(arr[i]);        }    }    return biu(left).concat([pivot],biu(right));}</code></pre><p>快速排序第一次看到也是研究了一下</p><ul><li>找到当前数组中间的下标，获取到对应下标的值</li><li>分别定义left right 数组用于承接<strong>小于小标的值</strong>和<strong>大于下标的值</strong></li><li>通过递归的方式继续上两步，直到符合条件进行return</li></ul><p>例：<br>    var arr = [1,8,2,7,3];</p><p>[1,8,<font color="red">2</font>,7,3]</p><p>[1][<font color="red">2</font>][8,7,3]</p><p>[1][2][8,<font color="red">7</font>,3]</p><p>[1,2,3,7,8]</p><p>拆分在合并 小于拆分值的在左边 大于拆分值的在右边 合并在拆分  一直重复递归，这就是快速排序，算法高效率之一！</p><p>好了，暂时就先介绍对着三种算法的理解，如果有问题的话，希望各位及时反馈给我~！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一名合格的前端不仅对自身业务能力的要求，还必须具有一定的算法知识，虽然博主数学就没及过格~,但是没办法，还是要学，这不，年前两天没啥事儿，看了看我最头痛的算法，当然，都是基本的，各位同学看到肯定一下就明白了，好了，进入正题~！&lt;br&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3305254330,4081387098&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github配合hexo建站攻略（4）域名与github绑定</title>
    <link href="http://yoursite.com/2018/02/23/github%E9%85%8D%E5%90%88hexo%E5%BB%BA%E7%AB%99%E6%94%BB%E7%95%A5%EF%BC%884%EF%BC%89%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2018/02/23/github配合hexo建站攻略（4）域名绑定/</id>
    <published>2018-02-23T02:45:31.000Z</published>
    <updated>2018-02-24T14:08:10.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开场"><a href="#开场" class="headerlink" title="开场"></a>开场</h3><p>域名这玩儿，我申请了几天终于下来了，这不~，趁热打铁，一并写出来与大家一块分享，本人域名<a href="www.hushnow.cn">www.hushnow.cn</a>，望各位大佬捧场，谢谢~~！</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2464799472,2104441980&amp;fm=27&amp;gp=0.jpg" alt="img"></p><p>嗯！<br><a id="more"></a></p><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>首先，你得先去注册个域名不是，看了看网上的大牛，大多都是<a href="https://sg.godaddy.com/zh?isc=gennbacn29&amp;countryview=1&amp;currencytype=CNY&amp;utm_source=baidu&amp;utm_medium=cpc&amp;utm_campaign=zh-cn_corp_sem_base_brand_bz&amp;utm_content=adgroup+-+20171124&amp;utm_term=Title&amp;mkwid={mediatype}WS66RcZ2_pcrid_{creative}_pdv__" target="_blank" rel="noopener">goDaddy</a>,这是一个新加坡网站，我就在这里购买的域名</p><p>1、注册什么的就不多说了，先去注册</p><p>2、搜一个域名</p><p><img src="/static/41.png" alt="img"></p><p>3、添加至购物车</p><p><img src="/static/42.png" alt="img"></p><p>4、剩下的就是登陆一下，选<strong>goDaddy</strong>是因为他支持支付宝付款，等你付完款后，他会进行实名认证，接下来你就至需要等几天，这个全程只需要关注邮箱即可！</p><h3 id="DNSpod"><a href="#DNSpod" class="headerlink" title="DNSpod"></a>DNSpod</h3><p>在这里我使用的是<strong>DNSpod</strong>来进行管理域名，有以下几点原因：<br>1、域名提供商提供的往往不够稳定。</p><p>2、域名提供商免费提供不的支持多线解析，但dnspod提供，即智能解析。支持网通电信教育国外等多种线路，更是支持分省解析。</p><p>3、域名提供商提供的由于用户众多，解析很慢，但dnspod很快，特别是vip用户，在保证稳定的前提下可以比域名提供商的快10倍以上。</p><p>4、功能的多样化。提供包括宕机检测，分省解析，访问量统计，分组管理，挂马扫描等在内的多种附加服务，保证网站的安全稳定。 5、DNS对大用户来说，影响是十分大的，所以很多网站都用dnspod。</p><p><strong>传送门</strong> <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a></p><p>1、 注册不用多说</p><p>2、 先绑定域名，NS是你DNS解析域名，你需要绑定两条A<strong>记录类型</strong>，分别为<strong>@</strong>、<strong>www</strong>，打开cmd，ping 用户名.github.io 然后你会看到ip地址，<strong>记录纸</strong>为你ping 出来的ip地址,下图为我本机的地址</p><p><img src="/static/43.png" alt="img"></p><p>3、 去goDaddy中绑定DNS ，点击我的账户 =&gt; 域名 =&gt; DNS管理</p><p><img src="/static/45.png" alt="img"></p><p>4、 将域名服务器进行更改，改为DNSpod的DNS来进行解析</p><p><img src="/static/44.png" alt="img"></p><p>5、 最后一步，在根目录下的sourse文件中新建CNAME文件，一定要大写，写上你申请的域名，不要加www!<br>eg:</p><pre><code>hushnow.cn</code></pre><p>好了，泡杯咖啡等10分钟再去访问你的域名，是不是很赞劲~~!</p><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2069975793,865929935&amp;fm=27&amp;gp=0.jpg" alt="img"></p><h4 id="完结！"><a href="#完结！" class="headerlink" title="完结！"></a>完结！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开场&quot;&gt;&lt;a href=&quot;#开场&quot; class=&quot;headerlink&quot; title=&quot;开场&quot;&gt;&lt;/a&gt;开场&lt;/h3&gt;&lt;p&gt;域名这玩儿，我申请了几天终于下来了，这不~，趁热打铁，一并写出来与大家一块分享，本人域名&lt;a href=&quot;www.hushnow.cn&quot;&gt;www.hushnow.cn&lt;/a&gt;，望各位大佬捧场，谢谢~~！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2464799472,2104441980&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;嗯！&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github配合hexo建站攻略（3）统计访问量</title>
    <link href="http://yoursite.com/2018/02/22/github%E9%85%8D%E5%90%88hexo%E5%BB%BA%E7%AB%99%E6%94%BB%E7%95%A5%EF%BC%883%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/22/github配合hexo建站攻略（3）/</id>
    <published>2018-02-22T12:27:04.000Z</published>
    <updated>2018-02-23T02:44:11.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="统计访问量的实现？"><a href="#统计访问量的实现？" class="headerlink" title="统计访问量的实现？"></a>统计访问量的实现？</h3><p>上一篇介绍了如何构建一个基本的网站，但是 是网站他就得有访问量不是~？ 不然怎么能满足咱们内心的蠢动，有木有~~！</p><p><img src="http://img5.imgtn.bdimg.com/it/u=3296605248,3911530965&amp;fm=27&amp;gp=0.jpg" alt="img"></p><p>。。。</p><a id="more"></a><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://www.lookk.cn/2017/12/09/hexo-yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/" target="_blank" rel="noopener">hexo yilia主题添加文章访问量统计</a></p><h3 id="太阳当空照-太阳对我眨眼睛"><a href="#太阳当空照-太阳对我眨眼睛" class="headerlink" title="太阳当空照~太阳对我眨眼睛~"></a>太阳当空照~太阳对我眨眼睛~</h3><p>在一开始的时候，我以为很难，可是呢~其实不难，既然这都是第二篇了，大家肯定跟我一样的想法</p><p>统计访问量有这几种：<strong>百度的站长统计</strong> 、 <strong>leancloud</strong> 、 <strong>不蒜子</strong>;</p><p>根据进行比对，不蒜子要简单很多，因为建站的初衷还是在于写博客，自己安慰自己，把学的东西都进行总结和巩固，所以就先它了~！！</p><p>不过首先声明，我使用的主题为yilia</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre><code>&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre><p>该代码可以粘贴至themes/yilia/layout/footer.ejs 或者 header.ejs 或者 left-col.ejs下</p><h3 id="站点访问量显示"><a href="#站点访问量显示" class="headerlink" title="站点访问量显示"></a>站点访问量显示</h3><p>因为这个显示是给人家看的，所以个人认为 放在left-col.ejs下，这样在PC进站时能够看到访问量，但是移动端看不到（正在想处理方法）,你也可以放在footer底部，这样虽然都可以看到，但是必须要看完文章后再能看到，感觉有点不太好</p><pre><code>&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt;</code></pre><p>计算访问量的方法有两种：<br>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。<br>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。<br>我用的是uv的方式，大家自行选择即可。</p><h3 id="添加文章访问量"><a href="#添加文章访问量" class="headerlink" title="添加文章访问量"></a>添加文章访问量</h3><p>文章的访问量显示在文章里面，所以在themes/yilia/layout/article.ejs里加上文章访问量的标签：</p><pre><code>&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</code></pre><p>我们直接就这样放在yilia主题中，首页也会显示该网页的访问量，没法正常使用，所以需要一个判断，如果是首页不显示该文章的访问量，下面这段代码添加在/themes/yilia/layout/_partial/article.ejs的header的日期后面：</p><pre><code>&lt;% if ( !index ){ %&gt;        &lt;span class=&quot;archive-article-date&quot;&gt;            阅读量 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;        &lt;/span&gt;&lt;% } %&gt;</code></pre><p>这样访问量就都有了，是不是很简单？</p><p><img src="http://img0.imgtn.bdimg.com/it/u=3651943344,1246360666&amp;fm=27&amp;gp=0.jpg" alt="img"></p><h4 id="未完，待续-！"><a href="#未完，待续-！" class="headerlink" title="未完，待续~！"></a>未完，待续~！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;统计访问量的实现？&quot;&gt;&lt;a href=&quot;#统计访问量的实现？&quot; class=&quot;headerlink&quot; title=&quot;统计访问量的实现？&quot;&gt;&lt;/a&gt;统计访问量的实现？&lt;/h3&gt;&lt;p&gt;上一篇介绍了如何构建一个基本的网站，但是 是网站他就得有访问量不是~？ 不然怎么能满足咱们内心的蠢动，有木有~~！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img5.imgtn.bdimg.com/it/u=3296605248,3911530965&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github配合hexo建站攻略（2）主题及头像上传</title>
    <link href="http://yoursite.com/2018/02/22/github%E9%85%8D%E5%90%88hexo%E5%BB%BA%E7%AB%99%E6%94%BB%E7%95%A5%EF%BC%882%EF%BC%89%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2018/02/22/github配合hexo建站攻略（2）主题/</id>
    <published>2018-02-22T12:01:19.000Z</published>
    <updated>2018-02-23T02:44:21.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>经过基础建站成功后，大家一定感觉默认的主题实在是太单调了，我看了几个主题,<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>是我比较喜欢的，所以就他了~！</p><p><img src="http://img1.imgtn.bdimg.com/it/u=1453468209,1035067192&amp;fm=27&amp;gp=0.jpg" alt="img"></p><p>。。。 好吧</p><a id="more"></a><p>首先，下载主题</p><pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><p>成功后目录为：</p><p><img src="/static/21.png" alt="img"></p><p>进入到根目录下的_config.yml 记住 是根目录下的 修改theme</p><pre><code>theme: yilia</code></pre><p>然后重新执行hexo g来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</p><p>这样主题便已经生成，等个几分钟在进行访问用户名.github.io即可看到</p><h3 id="头像上传"><a href="#头像上传" class="headerlink" title="头像上传"></a>头像上传</h3><p>图片存放在themes/source目录下</p><p>找到主题目录下的_config.yml<br>themes/_config.yml </p><pre><code>avatar: &quot;/图片名&quot; 例 avatar: &quot;/a.png&quot;</code></pre><p>好了，大功告成，是不是看着自己的头像感觉帅帅的~~！</p><p><img src="http://img4.imgtn.bdimg.com/it/u=51900639,198231787&amp;fm=27&amp;gp=0.jpg" alt="img"></p><h4 id="未完，待续-！"><a href="#未完，待续-！" class="headerlink" title="未完，待续~！"></a>未完，待续~！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;修改主题&quot;&gt;&lt;a href=&quot;#修改主题&quot; class=&quot;headerlink&quot; title=&quot;修改主题&quot;&gt;&lt;/a&gt;修改主题&lt;/h3&gt;&lt;p&gt;经过基础建站成功后，大家一定感觉默认的主题实在是太单调了，我看了几个主题,&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yilia&lt;/a&gt;是我比较喜欢的，所以就他了~！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img1.imgtn.bdimg.com/it/u=1453468209,1035067192&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;。。。 好吧&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github配合hexo建站攻略（1）建站基础</title>
    <link href="http://yoursite.com/2018/02/22/github%E9%85%8D%E5%90%88hexo%E5%BB%BA%E7%AB%99%E6%94%BB%E7%95%A5%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/22/github配合hexo建站攻略（1）/</id>
    <published>2018-02-22T02:51:50.000Z</published>
    <updated>2018-02-23T08:34:25.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作为一名小白，如何建站？"><a href="#作为一名小白，如何建站？" class="headerlink" title="作为一名小白，如何建站？"></a>作为一名小白，如何建站？</h2><p>可能我和大多数人一样，在听到别人都有自己的博客的时候，自己是多么的羡慕，妒忌，恨~！  但是奈何公司总是加班，根本没有时间去弄别的事情，难得有点时间，还要占用假期来进行研究<br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1010459245,4006277659&amp;fm=27&amp;gp=0.jpg" alt="avatar"> 哈哈哈！好了 言归正传！<br><a id="more"></a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa" target="_blank" rel="noopener">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a><br>以上是我参考的两篇大牛的日志，以下是我的总结。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>具有一定的编程能力和足够的耐心！</li><li>github账号一枚，作为一名程序员的标配</li><li>node环境及git的基本知识</li></ul><h3 id="github账号"><a href="#github账号" class="headerlink" title="github账号"></a>github账号</h3><p>没有github账号的同学快去注册吧~ 友情链接<a href="https://github.com/join" target="_blank" rel="noopener">github注册</a></p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><h5 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h5><p><img src="/static/1.png" alt="img"></p><h5 id="2-点击new-repository"><a href="#2-点击new-repository" class="headerlink" title="2.点击new repository"></a>2.点击new repository</h5><p><img src="/static/2.png" alt="img"></p><h5 id="3-点击create-repository-仓库建好了"><a href="#3-点击create-repository-仓库建好了" class="headerlink" title="3.点击create repository 仓库建好了"></a>3.点击create repository 仓库建好了</h5><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>打开git  右键 git Bash 找到一个文件夹，该文件夹就是你以后写blog的地方</p><pre><code>npm install hexo -g 全局安装</code></pre><p>也可以使用淘宝镜像 cnpm 的小伙伴可以使用cnpm  速度更快一些</p><pre><code>hexo -V 查看是否安装成功hexo init  进行初始化 过程可能会比较慢 稍等一分钟 不要急</code></pre><p><img src="/static/3.png" alt="img"></p><p>出现后才算成功！是不是有点久~~！淡定</p><pre><code>npm install  下载依赖包hexo g 初始化文件hexo s  启动本地服务</code></pre><p><img src="/static/4.png" alt="img"></p><pre><code>localhost:端口号</code></pre><p><img src="/static/5.png" alt="img"></p><p>如果看到上面这个图片说明你已经成功了</p><p>如果本地启动失败，说明端口号被占用了</p><pre><code>hexo server -p 5557 可更改端口号</code></pre><h3 id="与github仓库关联"><a href="#与github仓库关联" class="headerlink" title="与github仓库关联"></a>与github仓库关联</h3><p>使用git Bash</p><pre><code>git config \--global user.name &quot;用户名&quot;git comfig \--global user.email &quot;你的邮箱&quot;</code></pre><p>查看秘钥是否存在，因为你不希望你的仓库可以随意被别人改动</p><pre><code>cd ~/.ssh 进入ssh文件夹</code></pre><p>输入ls查看本地文件是否有id_rsa.pub这个文件，如果没有</p><pre><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot; 连续回车，最后生成id_rsa和id_rsa.pub 文件</code></pre><p><img src="/static/20.png" alt="img"></p><p>看到这说明成功了！</p><pre><code>记得 成功或者失败后github会给你发一份邮件</code></pre><p>.ssh文件 在 C:\用户\Administrator.ssh  下  完了查看着两个文件</p><p>输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><p><img src="/static/7.png" alt="img"></p><p>再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent</p><p><img src="/static/8.png" alt="img"></p><p>打开github</p><p><img src="/static/9.png" alt="img"></p><p><img src="/static/aa.png" alt="img"></p><p> 将 C:\用户\Administrator\/.ssh                id_rsa.pub  文件的内容复制粘贴进来</p><p><img src="/static/11.png" alt="img"></p><pre><code>ssh -T git@github.com  </code></pre><p>出现下图说明已经成功关联</p><p><img src="/static/12.png" alt="img"></p><p>失败 假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key</p><p>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存</p><p>测试：<br>在终端 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><h4 id="配置hexo-根文件-config-yml"><a href="#配置hexo-根文件-config-yml" class="headerlink" title="配置hexo 根文件_config.yml"></a>配置hexo 根文件_config.yml</h4><p>进入github仓库</p><p><img src="/static/13.png" alt="img"></p><p><img src="/static/1a4.png" alt="img"></p><p>将连接复制粘贴进来即可</p><pre><code>deploy:    type: git    repository: git@github.com:yuanhaozzz/yuanhaozzz.github.io.git    branch: master</code></pre><h4 id="新建一篇博客"><a href="#新建一篇博客" class="headerlink" title="新建一篇博客"></a>新建一篇博客</h4><pre><code>hexo new post &quot;博客名&quot;</code></pre><p><img src="/static/15.png" alt="img"></p><pre><code>在source下你会看见</code></pre><p><img src="/static/16.png" alt="img"></p><h4 id="部署及发布"><a href="#部署及发布" class="headerlink" title="部署及发布"></a>部署及发布</h4><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git --save</p><p>安装完成后即可发布</p><pre><code>hexo d -g </code></pre><p>部署成功后访问你的地址：http://用户名.github.io。就可以看到生成的文章了，是不是很爽！</p><p><img src="/static/18.png" alt="img"></p><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=48968824,2495411634&amp;fm=27&amp;gp=0.jpg" alt="img"></p><pre><code>这只是个基础，后续会继续更新~！</code></pre><h2 id="未完，待续-！"><a href="#未完，待续-！" class="headerlink" title="未完，待续~！"></a>未完，待续~！</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;作为一名小白，如何建站？&quot;&gt;&lt;a href=&quot;#作为一名小白，如何建站？&quot; class=&quot;headerlink&quot; title=&quot;作为一名小白，如何建站？&quot;&gt;&lt;/a&gt;作为一名小白，如何建站？&lt;/h2&gt;&lt;p&gt;可能我和大多数人一样，在听到别人都有自己的博客的时候，自己是多么的羡慕，妒忌，恨~！  但是奈何公司总是加班，根本没有时间去弄别的事情，难得有点时间，还要占用假期来进行研究&lt;br&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1010459245,4006277659&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;avatar&quot;&gt; 哈哈哈！好了 言归正传！&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
